from argparse import ArgumentParser

import pytorch_lightning as pl

from idv import experiment


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("--model")
    parser.add_argument("--gpu")
    parser.add_argument("--batch_size", default=64, type=int)

    args = parser.parse_args()
    dict_args = vars(args)

    hparams = {}
    blacklisted_arguments = ["id", "checkpoint", "gpus", "batch_size"]
    for key, value in dict_args.items():
        if value is not None and key not in blacklisted_arguments:
            hparams[key] = value

    if dict_args["checkpoint"] is None:
        checkpoints = Experiment(dict_args["id"]).load_all_checkpoints()
    else:
        checkpoints = [dict_args["checkpoint"]]

    for checkpoint in checkpoints:
        print("Running: checkpoint ", checkpoint)
        experiment = Experiment(model=f"{model}.ckpt", 
                                hparams=f"{model}.yaml",
                                gpu=7)
        trainer = pl.Trainer(deterministic=True, gpus="7,", max_epochs=1)
        trainer.test(experiment.model, datamodule=experiment.data)
        experiment, trainer = Experiment.test(
            dict_args["id"], checkpoint, dict_args["gpus"], **hparams
        )
        predictions = experiment.load_predictions(
            filename=Path(trainer.logger.log_dir)
            / f"checkpoints/epoch=0-step=0/test_{trainer.datamodule.split}.pt"
        )
        print(predictions["predictions"].shape)
        preds = predictions["predictions"].cpu()
        labels = predictions["labels"].cpu()

        print(preds.shape, labels.shape)
        print(f"Results for: {dict_args['id']}/{checkpoint}")
        for i, label in enumerate(experiment.data.data.labels):
            try:
                auc = roc_auc_score(
                    labels[:, i].int().numpy(), preds[:, i].numpy())
                print(f"{label.upper()} {auc:.4f}")
            except Exception as e:
                print(e)
